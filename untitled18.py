# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ri8M_2A3yDXXjL2j-LUP1kjcwyAZdpnJ
"""

import os
import json
import datetime
import csv
import random
import ssl

import streamlit as st
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
import nltk

# Configure SSL for downloads
ssl._create_default_https_context = ssl._create_unverified_context

# Download required NLTK data
nltk.data.path.append(os.path.abspath("nltk_data"))
nltk.download('punkt')

# Load intents from the intents.json file
file_path = os.path.abspath("intents.json")
with open(file_path, "r") as file:
    intents = json.load(file)

# Create the vectorizer and classifier
vectorizer = TfidfVectorizer()
clf = LogisticRegression(random_state=42, max_iter=10000)

# Preprocess the data
tags = []
patterns = []

for intent in intents['intents']:
    for pattern in intent["patterns"]:
        tags.append(intent["tag"])
        patterns.append(pattern)

# Train the model
X = vectorizer.fit_transform(patterns)
y = tags
clf.fit(X, y)

# Define chatbot function
def chatbot(input_text):
    input_vector = vectorizer.transform([input_text])
    tag = clf.predict(input_vector)[0]

    for intent in intents['intents']:
        if intent['tag'] == tag:
            response = random.choice(intent['responses'])
            return response

    return "I'm sorry, I don't understand that."

# Main Streamlit app
def main():
    st.title("Chatbot Using NLP and Logistic Regression")
    menu = ["Home", "Conversation History", "About"]
    choice = st.sidebar.selectbox("Menu", menu)

    if choice == "Home":
        st.write("Welcome to the chatbot! Type a message below to start a conversation.")

        # Check if chat log file exists; if not, create it
        if not os.path.exists("chat_log.csv"):
            with open('chat_log.csv', 'w', newline='', encoding="utf-8") as csvfile:
                csv_writer = csv.writer(csvfile)
                csv_writer.writerow(['User Input', 'Chatbot Response', 'Timestamp'])

        user_input = st.text_input("You:", key="user_input")

        if user_input:
            response = chatbot(user_input)

            # Display chatbot response
            st.text_area("Chatbot:", value=response, height=120, max_chars=None)

            # Get current timestamp
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            # Save conversation to chat log
            with open('chat_log.csv', 'a', newline='', encoding="utf-8") as csvfile:
                csv_writer = csv.writer(csvfile)
                csv_writer.writerow([user_input, response, timestamp])

            if response.lower() in ["goodbye", "bye"]:
                st.write("Thank you for chatting with me. Have a great day!")
                st.stop()

    elif choice == "Conversation History":
        st.header("Conversation History")

        if os.path.exists("chat_log.csv"):
            with open('chat_log.csv', 'r', encoding="utf-8") as csvfile:
                csv_reader = csv.reader(csvfile)
                next(csv_reader)  # Skip header row
                for row in csv_reader:
                    st.text(f"User: {row[0]}")
                    st.text(f"Chatbot: {row[1]}")
                    st.text(f"Timestamp: {row[2]}")
                    st.markdown("---")
        else:
            st.write("No conversation history found.")

    elif choice == "About":
        st.subheader("Project Overview")
        st.write("""
            This project demonstrates a simple chatbot that uses NLP techniques and a Logistic Regression algorithm.
            - *Training*: The chatbot is trained on labeled intents.
            - *Interface*: Built using Streamlit for a web-based interactive UI.
        """)
        st.subheader("Dataset")
        st.write("""
            The dataset contains:
            - Intents: The purpose of the user input (e.g., "greeting", "goodbye").
            - Patterns: Example phrases for each intent.
            - Responses: Predefined chatbot replies for each intent.
        """)
        st.subheader("Conclusion")
        st.write("""
            This chatbot is capable of understanding and responding to user inputs based on intents.
            It demonstrates the use of NLP and machine learning to build an interactive chatbot.
        """)

if _name_ == "_main_":
    main()